// hw09.rs - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—Å—É–≤—É —Ä—è–¥–∫–∞

/// –í–∏–∫–æ–Ω—É—î —Ü–∏–∫–ª—ñ—á–Ω–∏–π –∑—Å—É–≤ —Ä—è–¥–∫–∞
/// 
/// # –ê—Ä–≥—É–º–µ–Ω—Ç–∏
/// * `s` - —Ä—è–¥–æ–∫ –¥–ª—è –∑—Å—É–≤—É
/// * `n` - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∑—Å—É–≤—É
///   - –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ: –∑—Å—É–≤ –≤–ø—Ä–∞–≤–æ (—Å–∏–º–≤–æ–ª–∏ –∑ –∫—ñ–Ω—Ü—è –ø–µ—Ä–µ—Ö–æ–¥—è—Ç—å –Ω–∞ –ø–æ—á–∞—Ç–æ–∫)
///   - –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ: –∑—Å—É–≤ –≤–ª—ñ–≤–æ (—Å–∏–º–≤–æ–ª–∏ –∑ –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ—Ö–æ–¥—è—Ç—å –≤ –∫—ñ–Ω–µ—Ü—å)
///   - 0: —Ä—è–¥–æ–∫ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º
/// 
/// # –ü–æ–≤–µ—Ä—Ç–∞—î
/// –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –∑—Å—É–≤—É
/// 
/// # –ü—Ä–∏–∫–ª–∞–¥–∏
/// ```
/// assert_eq!(rotate("abcdefgh".to_string(), 1), "habcdefg");
/// assert_eq!(rotate("abcdefgh".to_string(), -1), "bcdefgha");
/// ```
pub fn rotate(s: String, n: isize) -> String {
    let chars: Vec<char> = s.chars().collect();
    let len = chars.len();
    
    // –Ø–∫—â–æ —Ä—è–¥–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º–∞—î –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, –∑—Å—É–≤ –Ω–µ –∑–º—ñ–Ω—é—î –π–æ–≥–æ
    if len <= 1 {
        return s;
    }
    
    // –ü—Ä–∏–≤–æ–¥–∏–º–æ –∑—Å—É–≤ –¥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É [0, len)
    let effective_shift = ((n % len as isize) + len as isize) % len as isize;
    
    if effective_shift == 0 {
        return s;
    }
    
    let split_point = len - effective_shift as usize;
    
    // –ë–µ—Ä–µ–º–æ —á–∞—Å—Ç–∏–Ω—É –∑ –∫—ñ–Ω—Ü—è —ñ —á–∞—Å—Ç–∏–Ω—É –∑ –ø–æ—á–∞—Ç–∫—É
    let rotated_chars: Vec<char> = chars[split_point..]
        .iter()
        .chain(chars[..split_point].iter())
        .cloned()
        .collect();
    
    rotated_chars.into_iter().collect()
}

/// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ slice –æ–ø–µ—Ä–∞—Ü—ñ—ó
pub fn rotate2(s: &str, n: &isize) -> String {
    let chars: Vec<char> = s.chars().collect();
    let len = chars.len();
    
    if len <= 1 {
        return s.to_string();
    }
    
    let effective_shift = ((n % len as isize) + len as isize) % len as isize;
    
    if effective_shift == 0 {
        return s.to_string();
    }
    
    let split_point = len - effective_shift as usize;
    let rotated_chars: Vec<char> = chars[split_point..]
        .iter()
        .chain(chars[..split_point].iter())
        .cloned()
        .collect();
    
    rotated_chars.into_iter().collect()
}

/// –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ rotate_left/rotate_right –º–µ—Ç–æ–¥–∏ Vec
pub fn rotate_vec_method(s: String, n: isize) -> String {
    let chars: Vec<char> = s.chars().collect();
    let len = chars.len();
    
    if len <= 1 {
        return s;
    }
    
    let mut rotated_chars = chars;
    let effective_shift = ((n % len as isize) + len as isize) % len as isize;
    
    if effective_shift == 0 {
        return s;
    }
    
    // rotate_right –ø–µ—Ä–µ–º—ñ—â—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–ø—Ä–∞–≤–æ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π
    rotated_chars.rotate_right(effective_shift as usize);
    rotated_chars.into_iter().collect()
}

/// –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–π—Ç–∞–º–∏ (—Ç—ñ–ª—å–∫–∏ ASCII)
pub fn rotate_bytes(s: String, n: isize) -> String {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä—è–¥–æ–∫ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ ASCII —Å–∏–º–≤–æ–ª–∏
    if !s.is_ascii() {
        // –Ø–∫—â–æ –Ω–µ ASCII, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        return rotate(s, n);
    }
    
    let len = s.len();
    
    if len <= 1 {
        return s;
    }
    
    let effective_shift = ((n % len as isize) + len as isize) % len as isize;
    
    if effective_shift == 0 {
        return s;
    }
    
    let bytes = s.as_bytes();
    let split_point = len - effective_shift as usize;
    
    let mut result = Vec::with_capacity(len);
    result.extend_from_slice(&bytes[split_point..]);
    result.extend_from_slice(&bytes[..split_point]);
    
    String::from_utf8(result).unwrap()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_basic_rotation() {
        assert_eq!(rotate("abcdefgh".to_string(), 1), "habcdefg");
        assert_eq!(rotate("abcdefgh".to_string(), -1), "bcdefgha");
        assert_eq!(rotate("abcdefgh".to_string(), 0), "abcdefgh");
    }

    #[test]
    fn test_full_rotation() {
        let s = "abcdefgh";
        assert_eq!(rotate(s.to_string(), 8), s);
        assert_eq!(rotate(s.to_string(), -8), s);
        assert_eq!(rotate(s.to_string(), 16), s);
    }

    #[test]
    fn test_large_shifts() {
        assert_eq!(rotate("abcdefgh".to_string(), 10), "ghabcdef");
        assert_eq!(rotate("abcdefgh".to_string(), -10), "cdefghab");
    }

    #[test]
    fn test_edge_cases() {
        assert_eq!(rotate("".to_string(), 5), "");
        assert_eq!(rotate("a".to_string(), 10), "a");
        assert_eq!(rotate("ab".to_string(), 1), "ba");
        assert_eq!(rotate("ab".to_string(), -1), "ba");
    }

    #[test]
    fn test() {
        let s = "abcdefgh";
        let shifts = [
            (0,  "abcdefgh"),
            (8,  "abcdefgh"),
            (-8, "abcdefgh"),
            (1,  "habcdefg"),
            (2,  "ghabcdef"),
            (10, "ghabcdef"),
            (-1, "bcdefgha"),
            (-2, "cdefghab"),
            (-10,"cdefghab"),
        ];

        shifts
            .iter()
            .for_each(|(n, exp)|
                assert_eq!(
                    rotate2(s, n), 
                    exp.to_string()
                )
            );
    }

    #[test]
    fn test_all_implementations() {
        let test_cases = vec![
            ("abcdefgh", 1, "habcdefg"),
            ("abcdefgh", -1, "bcdefgha"),
            ("abcdefgh", 2, "ghabcdef"),
            ("abcdefgh", -2, "cdefghab"),
            ("hello", 2, "lohel"),
            ("hello", -2, "llohe"),
        ];

        for (input, shift, expected) in test_cases {
            assert_eq!(rotate(input.to_string(), shift), expected);
            assert_eq!(rotate2(input, &shift), expected);
            assert_eq!(rotate_vec_method(input.to_string(), shift), expected);
            assert_eq!(rotate_bytes(input.to_string(), shift), expected);
        }
    }

    #[test]
    fn test_unicode() {
        assert_eq!(rotate("üéµüé∂üéºüéπ".to_string(), 1), "üéπüéµüé∂üéº");
        assert_eq!(rotate("–ø—Ä–∏–≤—ñ—Ç".to_string(), 2), "—ñ—Ç–ø—Ä–∏–≤");
        assert_eq!(rotate("üåü‚≠ê‚ú®".to_string(), -1), "‚≠ê‚ú®üåü");
    }
}

fn main() {
    println!("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑—Å—É–≤—É —Ä—è–¥–∫—ñ–≤ ===");
    
    // –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏
    let test_string = "abcdefgh";
    println!("–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫: {}", test_string);
    
    println!("\n–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –∑—Å—É–≤–∏ (–≤–ø—Ä–∞–≤–æ):");
    for i in 1..=3 {
        println!("  –∑—Å—É–≤ –Ω–∞ {}: {}", i, rotate(test_string.to_string(), i));
    }
    
    println!("\n–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –∑—Å—É–≤–∏ (–≤–ª—ñ–≤–æ):");
    for i in 1..=3 {
        println!("  –∑—Å—É–≤ –Ω–∞ -{}: {}", i, rotate(test_string.to_string(), -i));
    }
    
    println!("\n–í–µ–ª–∏–∫—ñ –∑—Å—É–≤–∏:");
    println!("  –∑—Å—É–≤ –Ω–∞ 10: {}", rotate(test_string.to_string(), 10));
    println!("  –∑—Å—É–≤ –Ω–∞ -10: {}", rotate(test_string.to_string(), -10));
    
    println!("\n–ü–æ–≤–Ω—ñ –æ–±–µ—Ä—Ç–∏:");
    println!("  –∑—Å—É–≤ –Ω–∞ 8: {}", rotate(test_string.to_string(), 8));
    println!("  –∑—Å—É–≤ –Ω–∞ -8: {}", rotate(test_string.to_string(), -8));
    
    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ Unicode
    println!("\n=== Unicode —Ä—è–¥–∫–∏ ===");
    let unicode_string = "üéµüé∂üéºüéπ";
    println!("–û—Ä–∏–≥—ñ–Ω–∞–ª: {}", unicode_string);
    println!("–ó—Å—É–≤ –Ω–∞ 1: {}", rotate(unicode_string.to_string(), 1));
    println!("–ó—Å—É–≤ –Ω–∞ -1: {}", rotate(unicode_string.to_string(), -1));
    
    let cyrillic_string = "–ø—Ä–∏–≤—ñ—Ç";
    println!("\n–û—Ä–∏–≥—ñ–Ω–∞–ª: {}", cyrillic_string);
    println!("–ó—Å—É–≤ –Ω–∞ 2: {}", rotate(cyrillic_string.to_string(), 2));
    println!("–ó—Å—É–≤ –Ω–∞ -2: {}", rotate(cyrillic_string.to_string(), -2));
    
    // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    println!("\n=== –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ===");
    let long_string = "a".repeat(10000);
    let start = std::time::Instant::now();
    let _ = rotate(long_string.clone(), 1000);
    println!("–ó—Å—É–≤ –¥–æ–≤–≥–æ–≥–æ —Ä—è–¥–∫–∞ (10000 —Å–∏–º–≤–æ–ª—ñ–≤): {:?}", start.elapsed());
}

// === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑—Å—É–≤—É —Ä—è–¥–∫—ñ–≤ ===
// –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫: abcdefgh

// –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –∑—Å—É–≤–∏ (–≤–ø—Ä–∞–≤–æ):
//   –∑—Å—É–≤ –Ω–∞ 1: habcdefg
//   –∑—Å—É–≤ –Ω–∞ 2: ghabcdef
//   –∑—Å—É–≤ –Ω–∞ 3: fghabcde

// –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –∑—Å—É–≤–∏ (–≤–ª—ñ–≤–æ):
//   –∑—Å—É–≤ –Ω–∞ -1: bcdefgha
//   –∑—Å—É–≤ –Ω–∞ -2: cdefghab
//   –∑—Å—É–≤ –Ω–∞ -3: defghabc

// –í–µ–ª–∏–∫—ñ –∑—Å—É–≤–∏:
//   –∑—Å—É–≤ –Ω–∞ 10: ghabcdef
//   –∑—Å—É–≤ –Ω–∞ -10: cdefghab

// –ü–æ–≤–Ω—ñ –æ–±–µ—Ä—Ç–∏:
//   –∑—Å—É–≤ –Ω–∞ 8: abcdefgh
//   –∑—Å—É–≤ –Ω–∞ -8: abcdefgh

// === Unicode —Ä—è–¥–∫–∏ ===
// –û—Ä–∏–≥—ñ–Ω–∞–ª: üéµüé∂üéºüéπ
// –ó—Å—É–≤ –Ω–∞ 1: üéπüéµüé∂üéº
// –ó—Å—É–≤ –Ω–∞ -1: üé∂üéºüéπüéµ

// –û—Ä–∏–≥—ñ–Ω–∞–ª: –ø—Ä–∏–≤—ñ—Ç
// –ó—Å—É–≤ –Ω–∞ 2: —ñ—Ç–ø—Ä–∏–≤
// –ó—Å—É–≤ –Ω–∞ -2: –∏–≤—ñ—Ç–ø—Ä

// === –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ===
// –ó—Å—É–≤ –¥–æ–≤–≥–æ–≥–æ —Ä—è–¥–∫–∞ (10000 —Å–∏–º–≤–æ–ª—ñ–≤): 326.1¬µs

// === Code Execution Successful ===